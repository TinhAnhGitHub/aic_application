defaults:
  - hydra: default
  - _self_

hydra:
  searchpath:
    - file://conf/

data_path_prefix: /mnt/fangkai_blob/share/
model_path_prefix: /mnt/fangkai_blob/share/models
output_path_prefix: /mnt/fangkai_blob/reward_modeling/

train_file: ${data_path_prefix}/dataset/magicoder/data-oss_instruct-decontaminated-python.json
dev_file: ${train_file}
test_file: ${train_file}

port: 6000
model:

sampling_params:
  _target_: vllm.SamplingParams
  n: 1
  temperature: 0.0
  top_p: 1.0
  stop: [ "</s>", "\n\n\n\n", "Context:\n", "Thought 42:", "<|end_of_text|>", "<|eot_id|>, <|EOT|>" ]
  max_tokens: 1024

tem: ${sampling_params.temperature}
n: ${sampling_params.n}
split_size: 2
split_id: 0
max_num_seqs: 64


suffix: ${split_id}-of-${split_size}
output_file: ${output_dir}/apps-test-inputs-gen/${eval_sub_path}/sub_dev.0shot.tem${tem}.n${n}.${suffix}.v1.0.json
flush_file: ${output_file}l

apply_chat_template: True
add_generation_prompt: True

chat_prefix:
chat_connect:
chat_suffix:
prompt:
  _target_: data.input_utils.read_text
  file_path: prompts/apps/test_input_gen_2shot_v2.1.txt


# Data loading
read_tensor:
  _target_: data.combine_dataset.ResponseAlignDataset
  template:
    _target_: data.input_utils.compose_template
    units:
      prompt: ${prompt}
    composition: "{prompt}"
  instruction:
  replacement:
    "[[Question]]": "problem"
  index_field: index
  service_based: False
  split_size: ${split_size}
  split_id: ${split_id}
  service_processor:
    _target_: data.vllm.VLLMRequestGenerator
    api_url: http://0.0.0.0:${port}/v1/completions
    max_tokens: 4096
    model: ${model}
    stop: ${sampling_params.stop}
    temperature: ${sampling_params.temperature}
    n: ${sampling_params.n}
  max_data_num: -1
  flush_file: ${flush_file}

exp_name:
save_best: False
eval_sub_path: ""
output_dir: ${model_path_prefix}//Meta-Llama-3.1-70B-Instruct/

# Dataloader
num_workers: 32
prefetch_factor: 2

dp_size:
tp_size: 1
pp_size: 1

post_process:
  _target_: post_processors.openai_api_callback.SaveOnlyCallBack
  output_file: ${output_file}
  answer_clean:
  index_field: index
  resume: True

# Training hyper-parameters
per_gpu_train_batch_size: 1
per_gpu_eval_batch_size: 1

ddp_eval: False
no_cuda: False
seed: 42
local_rank: -1

# Temporary variables
fp16: True
fp16_bfloat16: True
n_gpu: 1
device:
train_batch_size:
eval_batch_size:
world_size: